{"version":3,"file":"ShareServiceClient.js","sourceRoot":"","sources":["../../../src/ShareServiceClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport {\n  FileServiceProperties,\n  ListSharesIncludeType,\n  ShareCreateResponse,\n  ShareDeleteResponse,\n  ServiceGetPropertiesResponse,\n  ServiceSetPropertiesResponse,\n  ServiceListSharesSegmentHeaders,\n  ListSharesResponseModel,\n  SharePropertiesInternal,\n  ServiceSetPropertiesHeaders,\n  ServiceGetPropertiesHeaders,\n} from \"./generatedModels\";\nimport { Service } from \"./generated/src/operationsInterfaces\";\nimport { isPipelineLike, newPipeline, Pipeline } from \"./Pipeline\";\nimport { StorageClient, CommonOptions } from \"./StorageClient\";\nimport { ShareClientInternal } from \"./ShareClientInternal\";\nimport { ShareClient, ShareCreateOptions, ShareDeleteMethodOptions } from \"./Clients\";\nimport {\n  WithResponse,\n  appendToURLPath,\n  extractConnectionStringParts,\n  assertResponse,\n  removeEmptyString,\n} from \"./utils/utils.common\";\nimport { Credential } from \"../../storage-blob/src/credentials/Credential\";\nimport { StorageSharedKeyCredential } from \"../../storage-blob/src/credentials/StorageSharedKeyCredential\";\nimport { AnonymousCredential } from \"../../storage-blob/src/credentials/AnonymousCredential\";\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { isNode } from \"@azure/core-util\";\nimport { tracingClient } from \"./utils/tracing\";\nimport { ShareClientConfig, ShareClientOptions, ShareProtocols, toShareProtocols } from \"./models\";\nimport { AccountSASPermissions } from \"./AccountSASPermissions\";\nimport {\n  generateAccountSASQueryParameters,\n  generateAccountSASQueryParametersInternal,\n} from \"./AccountSASSignatureValues\";\nimport { AccountSASServices } from \"./AccountSASServices\";\nimport { SASProtocol } from \"./SASQueryParameters\";\nimport { SasIPRange } from \"./SasIPRange\";\nimport { appendToURLQuery } from \"./utils/utils.common\";\nimport { TokenCredential, isTokenCredential } from \"@azure/core-auth\";\n\n/**\n * Options to configure Share - List Shares Segment operations.\n *\n * See:\n * - {@link ShareServiceClient.listSegments}\n * - {@link ShareServiceClient.listItems}\n * - {@link ShareServiceClient.listSharesSegment}\n */\ninterface ServiceListSharesSegmentOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Filters the results to return only entries whose\n   * name begins with the specified prefix.\n   */\n  prefix?: string;\n  /**\n   * Specifies the maximum number of entries to\n   * return. If the request does not specify maxResults, or specifies a value\n   * greater than 5,000, the server will return up to 5,000 items.\n   */\n  maxResults?: number;\n\n  /**\n   * Include this parameter to\n   * specify one or more datasets to include in the response.\n   */\n  include?: ListSharesIncludeType[];\n}\n\n/**\n * Options to configure the {@link ShareServiceClient.listShares} operation.\n */\nexport interface ServiceListSharesOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Filters the results to return only entries whose\n   * name begins with the specified prefix.\n   */\n  prefix?: string;\n\n  /**\n   * Specifies that share snapshots should be included in the enumeration. Share Snapshots are listed from oldest to newest in the response.\n   */\n  includeMetadata?: boolean;\n\n  /**\n   * Specifies that share snapshot should be returned in the response.\n   */\n  includeSnapshots?: boolean;\n\n  /**\n   * Specifies that share soft deleted should be returned in the response.\n   */\n  includeDeleted?: boolean;\n}\n\n/**\n * Options to configure the {@link ShareServiceClient.getProperties} operation.\n */\nexport interface ServiceGetPropertiesOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure the {@link ShareServiceClient.setProperties} operation.\n */\nexport interface ServiceSetPropertiesOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure the {@link ShareServiceClient.undelete} operation.\n */\nexport interface ServiceUndeleteShareOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Properties of a share.\n */\nexport type ShareProperties = SharePropertiesInternal & {\n  /**\n   * The protocols that have been enabled on the share.\n   */\n  protocols?: ShareProtocols;\n};\n\n/**\n * A listed Azure Storage share item.\n */\nexport interface ShareItem {\n  name: string;\n  snapshot?: string;\n  deleted?: boolean;\n  version?: string;\n  properties: ShareProperties;\n  metadata?: { [propertyName: string]: string };\n}\n\n/**\n * An enumeration of shares.\n */\nexport interface ListSharesResponse {\n  serviceEndpoint: string;\n  prefix?: string;\n  marker?: string;\n  maxResults?: number;\n  shareItems?: ShareItem[];\n  continuationToken: string;\n}\n\n/**\n * Contains response data for the {@link ShareServiceClient.listShares} operation.\n */\nexport type ServiceListSharesSegmentResponse = WithResponse<\n  ListSharesResponse & ServiceListSharesSegmentHeaders,\n  ServiceListSharesSegmentHeaders,\n  ListSharesResponseModel\n>;\n\n/**\n * Options to configure {@link ShareServiceClient.generateAccountSasUrl} operation.\n */\nexport interface ServiceGenerateAccountSasUrlOptions {\n  /**\n   * The version of the service this SAS will target. If not specified, it will default to the version targeted by the\n   * library.\n   */\n  version?: string;\n\n  /**\n   * Optional. SAS protocols allowed.\n   */\n  protocol?: SASProtocol;\n\n  /**\n   * Optional. When the SAS will take effect.\n   */\n  startsOn?: Date;\n  /**\n   * Optional. IP range allowed.\n   */\n  ipRange?: SasIPRange;\n}\n\n/**\n * A ShareServiceClient represents a URL to the Azure Storage File service allowing you\n * to manipulate file shares.\n */\nexport class ShareServiceClient extends StorageClient {\n  /**\n   * serviceContext provided by protocol layer.\n   */\n  private serviceContext: Service;\n\n  private shareClientConfig?: ShareClientConfig;\n\n  /**\n   *\n   * Creates an instance of ShareServiceClient from connection string.\n   *\n   * @param connectionString - Account connection string or a SAS connection string of an Azure storage account.\n   *                                  [ Note - Account connection string can only be used in NODE.JS runtime. ]\n   *                                  Account connection string example -\n   *                                  `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`\n   *                                  SAS connection string example -\n   *                                  `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`\n   * @param options - Options to configure the HTTP pipeline.\n   * @returns A new ShareServiceClient from the given connection string.\n   */\n  public static fromConnectionString(\n    connectionString: string,\n    // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options */\n    options?: ShareClientOptions,\n  ): ShareServiceClient {\n    const extractedCreds = extractConnectionStringParts(connectionString);\n    if (extractedCreds.kind === \"AccountConnString\") {\n      if (isNode) {\n        const sharedKeyCredential = new StorageSharedKeyCredential(\n          extractedCreds.accountName!,\n          extractedCreds.accountKey,\n        );\n        const pipeline = newPipeline(sharedKeyCredential, options);\n        return new ShareServiceClient(extractedCreds.url, pipeline, options);\n      } else {\n        throw new Error(\"Account connection string is only supported in Node.js environment\");\n      }\n    } else if (extractedCreds.kind === \"SASConnString\") {\n      const pipeline = newPipeline(new AnonymousCredential(), options);\n      return new ShareServiceClient(\n        extractedCreds.url + \"?\" + extractedCreds.accountSas,\n        pipeline,\n        options,\n      );\n    } else {\n      throw new Error(\n        \"Connection string must be either an Account connection string or a SAS connection string\",\n      );\n    }\n  }\n\n  /**\n   * Creates an instance of ShareServiceClient.\n   *\n   * @param url - A URL string pointing to Azure Storage file service, such as\n   *                     \"https://myaccount.file.core.windows.net\". You can Append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.file.core.windows.net?sasString\".\n   * @param credential - Such as AnonymousCredential, StorageSharedKeyCredential, or TokenCredential,\n   *                                  If not specified, AnonymousCredential is used.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n\n  constructor(\n    url: string,\n    credential?: Credential | TokenCredential,\n    // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options */\n    options?: ShareClientOptions,\n  );\n  /**\n   * Creates an instance of ShareServiceClient.\n   *\n   * @param url - A URL string pointing to Azure Storage file service, such as\n   *                     \"https://myaccount.file.core.windows.net\". You can Append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.file.core.windows.net?sasString\".\n   * @param pipeline - Call newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options */\n  constructor(url: string, pipeline: Pipeline, options?: ShareClientConfig);\n  constructor(\n    url: string,\n    credentialOrPipeline?: Credential | TokenCredential | Pipeline,\n    // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options */\n    options?: ShareClientOptions,\n  ) {\n    let pipeline: Pipeline;\n    if (isPipelineLike(credentialOrPipeline)) {\n      pipeline = credentialOrPipeline;\n    } else if (\n      credentialOrPipeline instanceof Credential ||\n      isTokenCredential(credentialOrPipeline)\n    ) {\n      pipeline = newPipeline(credentialOrPipeline, options);\n    } else {\n      // The second parameter is undefined. Use anonymous credential.\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    }\n\n    super(url, pipeline);\n    this.shareClientConfig = options;\n    this.serviceContext = this.storageClientContext.service;\n  }\n\n  /**\n   * Creates a ShareClient object.\n   *\n   * @param shareName - Name of a share.\n   * @returns The ShareClient object for the given share name.\n   *\n   * Example usage:\n   *\n   * ```js\n   * const shareClient = serviceClient.getShareClient(\"<share name>\");\n   * await shareClient.create();\n   * console.log(\"Created share successfully!\");\n   * ```\n   */\n  public getShareClient(shareName: string): ShareClient {\n    return new ShareClient(\n      appendToURLPath(this.url, shareName),\n      this.pipeline,\n      this.shareClientConfig,\n    );\n  }\n\n  /**\n   * Creates a Share.\n   *\n   * @param shareName -\n   * @param options -\n   * @returns Share creation response and the corresponding share client.\n   */\n  public async createShare(\n    shareName: string,\n    options: ShareCreateOptions = {},\n  ): Promise<{ shareCreateResponse: ShareCreateResponse; shareClient: ShareClient }> {\n    return tracingClient.withSpan(\n      \"ShareServiceClient-createShare\",\n      options,\n      async (updatedOptions) => {\n        const shareClient = this.getShareClient(shareName);\n        const shareCreateResponse = await shareClient.create(updatedOptions);\n        return {\n          shareCreateResponse,\n          shareClient,\n        };\n      },\n    );\n  }\n\n  /**\n   * Deletes a Share.\n   *\n   * @param shareName -\n   * @param options -\n   * @returns Share deletion response and the corresponding share client.\n   */\n  public async deleteShare(\n    shareName: string,\n    options: ShareDeleteMethodOptions = {},\n  ): Promise<ShareDeleteResponse> {\n    return tracingClient.withSpan(\n      \"ShareServiceClient-deleteShare\",\n      options,\n      async (updatedOptions) => {\n        const shareClient = this.getShareClient(shareName);\n        return shareClient.delete(updatedOptions);\n      },\n    );\n  }\n\n  /**\n   * Gets the properties of a storage account’s file service, including properties\n   * for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-file-service-properties\n   *\n   * @param options - Options to Get Properties operation.\n   * @returns Response data for the Get Properties operation.\n   */\n  public async getProperties(\n    options: ServiceGetPropertiesOptions = {},\n  ): Promise<ServiceGetPropertiesResponse> {\n    return tracingClient.withSpan(\n      \"ShareServiceClient-getProperties\",\n      options,\n      async (updatedOptions) => {\n        return assertResponse<\n          ServiceGetPropertiesHeaders & FileServiceProperties,\n          ServiceGetPropertiesHeaders,\n          FileServiceProperties\n        >(\n          await this.serviceContext.getProperties({\n            ...updatedOptions,\n            ...this.shareClientConfig,\n          }),\n        );\n      },\n    );\n  }\n\n  /**\n   * Sets properties for a storage account’s file service endpoint, including properties\n   * for Storage Analytics, CORS (Cross-Origin Resource Sharing) rules and soft delete settings.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-file-service-properties\n   *\n   * @param properties -\n   * @param options - Options to Set Properties operation.\n   * @returns Response data for the Set Properties operation.\n   */\n  public async setProperties(\n    properties: FileServiceProperties,\n    options: ServiceSetPropertiesOptions = {},\n  ): Promise<ServiceSetPropertiesResponse> {\n    return tracingClient.withSpan(\n      \"ShareServiceClient-setProperties\",\n      options,\n      async (updatedOptions) => {\n        return assertResponse<ServiceSetPropertiesHeaders, ServiceSetPropertiesHeaders>(\n          await this.serviceContext.setProperties(properties, {\n            ...updatedOptions,\n            ...this.shareClientConfig,\n          }),\n        );\n      },\n    );\n  }\n\n  /**\n   * Returns an AsyncIterableIterator for {@link ServiceListSharesSegmentResponse} objects\n   *\n   * @param marker - A string value that identifies the portion of\n   *                          the list of shares to be returned with the next listing operation. The\n   *                          operation returns the ContinuationToken value within the response body if the\n   *                          listing operation did not return all shares remaining to be listed\n   *                          with the current page. The ContinuationToken value can be used as the value for\n   *                          the marker parameter in a subsequent call to request the next page of list\n   *                          items. The marker value is opaque to the client.\n   * @param options - Options to list shares operation.\n   */\n  private async *listSegments(\n    marker?: string,\n    options: ServiceListSharesSegmentOptions = {},\n  ): AsyncIterableIterator<ServiceListSharesSegmentResponse> {\n    if (options.prefix === \"\") {\n      options.prefix = undefined;\n    }\n\n    let listSharesSegmentResponse;\n    do {\n      listSharesSegmentResponse = await this.listSharesSegment(marker, options);\n      marker = listSharesSegmentResponse.continuationToken;\n      yield await listSharesSegmentResponse;\n    } while (marker);\n  }\n\n  /**\n   * Returns an AsyncIterableIterator for share items\n   *\n   * @param options - Options to list shares operation.\n   */\n  private async *listItems(\n    options: ServiceListSharesSegmentOptions = {},\n  ): AsyncIterableIterator<ShareItem> {\n    if (options.prefix === \"\") {\n      options.prefix = undefined;\n    }\n\n    let marker: string | undefined;\n    for await (const segment of this.listSegments(marker, options)) {\n      if (segment.shareItems) {\n        yield* segment.shareItems;\n      }\n    }\n  }\n\n  /**\n   * Returns an async iterable iterator to list all the shares\n   * under the specified account.\n   *\n   * .byPage() returns an async iterable iterator to list the shares in pages.\n   *\n   * Example using `for await` syntax:\n   *\n   * ```js\n   * let i = 1;\n   * for await (const share of serviceClient.listShares()) {\n   *   console.log(`Share ${i++}: ${share.name}`);\n   * }\n   * ```\n   *\n   * Example using `iter.next()`:\n   *\n   * ```js\n   * let i = 1;\n   * let iter = serviceClient.listShares();\n   * let shareItem = await iter.next();\n   * while (!shareItem.done) {\n   *   console.log(`Share ${i++}: ${shareItem.value.name}`);\n   *   shareItem = await iter.next();\n   * }\n   * ```\n   *\n   * Example using `byPage()`:\n   *\n   * ```js\n   * // passing optional maxPageSize in the page settings\n   * let i = 1;\n   * for await (const response of serviceClient.listShares().byPage({ maxPageSize: 20 })) {\n   *   if (response.shareItems) {\n   *    for (const share of response.shareItems) {\n   *        console.log(`Share ${i++}: ${share.name}`);\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * Example using paging with a marker:\n   *\n   * ```js\n   * let i = 1;\n   * let iterator = serviceClient.listShares().byPage({ maxPageSize: 2 });\n   * let response = (await iterator.next()).value;\n   *\n   * // Prints 2 share names\n   * if (response.shareItems) {\n   *   for (const share of response.shareItems) {\n   *     console.log(`Share ${i++}: ${share.name}`);\n   *   }\n   * }\n   *\n   * // Gets next marker\n   * let marker = response.continuationToken;\n   *\n   * // Passing next marker as continuationToken\n   * iterator = serviceClient.listShares().byPage({ continuationToken: marker, maxPageSize: 10 });\n   * response = (await iterator.next()).value;\n   *\n   * // Prints 10 share names\n   * if (response.shareItems) {\n   *   for (const share of response.shareItems) {\n   *     console.log(`Share ${i++}: ${share.name}`);\n   *   }\n   * }\n   * ```\n   *\n   * @param options - Options to list shares operation.\n   *\n   * An asyncIterableIterator that supports paging.\n   */\n  public listShares(\n    options: ServiceListSharesOptions = {},\n  ): PagedAsyncIterableIterator<ShareItem, ServiceListSharesSegmentResponse> {\n    if (options.prefix === \"\") {\n      options.prefix = undefined;\n    }\n\n    const include: ListSharesIncludeType[] = [];\n    if (options.includeMetadata) {\n      include.push(\"metadata\");\n    }\n    if (options.includeSnapshots) {\n      include.push(\"snapshots\");\n    }\n    if (options.includeDeleted) {\n      include.push(\"deleted\");\n    }\n\n    const updatedOptions: ServiceListSharesSegmentOptions = {\n      ...options,\n      ...(include.length > 0 ? { include: include } : {}),\n    };\n\n    // AsyncIterableIterator to iterate over queues\n    const iter = this.listItems(updatedOptions);\n    return {\n      /**\n       * The next method, part of the iteration protocol\n       */\n      next() {\n        return iter.next();\n      },\n      /**\n       * The connection to the async iterator, part of the iteration protocol\n       */\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      /**\n       * Return an AsyncIterableIterator that works a page at a time\n       */\n      byPage: (settings: PageSettings = {}) => {\n        return this.listSegments(removeEmptyString(settings.continuationToken), {\n          maxResults: settings.maxPageSize,\n          ...updatedOptions,\n        });\n      },\n    };\n  }\n\n  /**\n   * Gets the properties of a storage account's File service, including properties for Storage\n   * Analytics metrics and CORS (Cross-Origin Resource Sharing) rules.\n   *\n   * @param marker - A string value that identifies the portion of\n   *                          the list to be returned with the next list operation. The operation\n   *                          returns a marker value within the response body if the list returned was\n   *                          not complete. The marker value may then be used in a subsequent call to\n   *                          request the next set of list items. The marker value is opaque to the\n   *                          client.\n   * @param options - Options to List Shares Segment operation.\n   * @returns Response data for the List Shares Segment operation.\n   */\n  private async listSharesSegment(\n    marker?: string,\n    options: ServiceListSharesSegmentOptions = {},\n  ): Promise<ServiceListSharesSegmentResponse> {\n    if (options.prefix === \"\") {\n      options.prefix = undefined;\n    }\n    return tracingClient.withSpan(\n      \"ShareServiceClient-listSharesSegment\",\n      options,\n      async (updatedOptions) => {\n        const res = assertResponse<\n          ServiceListSharesSegmentHeaders & ListSharesResponseModel,\n          ServiceListSharesSegmentHeaders,\n          ListSharesResponseModel\n        >(\n          await this.serviceContext.listSharesSegment({\n            ...updatedOptions,\n            ...this.shareClientConfig,\n            marker,\n          }),\n        );\n\n        // parse protocols\n        if (res.shareItems) {\n          for (let i = 0; i < res.shareItems.length; i++) {\n            const protocolsStr = res.shareItems[i].properties.enabledProtocols;\n            (res.shareItems[i].properties as any).protocols = toShareProtocols(protocolsStr);\n          }\n        }\n\n        return res;\n      },\n    );\n  }\n\n  /**\n   * Restores a previously deleted share.\n   * This API is only functional if Share Soft Delete is enabled\n   * for the storage account associated with the share.\n   *\n   * @param deletedShareName - The name of the previously deleted share.\n   * @param deletedShareVersion - The version of the previously deleted share.\n   * @param options - Options to Share undelete operation.\n   * @returns Restored share.\n   */\n  public async undeleteShare(\n    deletedShareName: string,\n    deletedShareVersion: string,\n    options: ServiceUndeleteShareOptions = {},\n  ): Promise<ShareClient> {\n    return tracingClient.withSpan(\n      \"ShareServiceClient-undeleteShare\",\n      options,\n      async (updatedOptions) => {\n        const shareClient = this.getShareClient(deletedShareName);\n        await new ShareClientInternal(shareClient.url, this.pipeline).restore({\n          ...updatedOptions,\n          ...this.shareClientConfig,\n          deletedShareName: deletedShareName,\n          deletedShareVersion: deletedShareVersion,\n        });\n        return shareClient;\n      },\n    );\n  }\n\n  /**\n   * Only available for ShareServiceClient constructed with a shared key credential.\n   *\n   * Generates an account Shared Access Signature (SAS) URI based on the client properties\n   * and parameters passed in. The SAS is signed by the shared key credential of the client.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-account-sas\n   *\n   * @param expiresOn - Optional. The time at which the shared access signature becomes invalid. Default to an hour later if not specified.\n   * @param permissions - Specifies the list of permissions to be associated with the SAS.\n   * @param resourceTypes - Specifies the resource types associated with the shared access signature.\n   * @param options - Optional parameters.\n   * @returns An account SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n   */\n  public generateAccountSasUrl(\n    expiresOn?: Date,\n    permissions: AccountSASPermissions = AccountSASPermissions.parse(\"r\"),\n    resourceTypes: string = \"sco\",\n    options: ServiceGenerateAccountSasUrlOptions = {},\n  ): string {\n    if (!(this.credential instanceof StorageSharedKeyCredential)) {\n      throw RangeError(\n        \"Can only generate the account SAS when the client is initialized with a shared key credential\",\n      );\n    }\n\n    if (expiresOn === undefined) {\n      const now = new Date();\n      expiresOn = new Date(now.getTime() + 3600 * 1000);\n    }\n\n    const sas = generateAccountSASQueryParameters(\n      {\n        permissions,\n        expiresOn,\n        resourceTypes,\n        services: AccountSASServices.parse(\"f\").toString(),\n        ...options,\n      },\n      this.credential,\n    ).toString();\n\n    return appendToURLQuery(this.url, sas);\n  }\n\n  /**\n   * Only available for ShareServiceClient constructed with a shared key credential.\n   *\n   * Generates string to sign for an account Shared Access Signature (SAS) URI based on the client properties\n   * and parameters passed in. The SAS is signed by the shared key credential of the client.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-account-sas\n   *\n   * @param expiresOn - Optional. The time at which the shared access signature becomes invalid. Default to an hour later if not specified.\n   * @param permissions - Specifies the list of permissions to be associated with the SAS.\n   * @param resourceTypes - Specifies the resource types associated with the shared access signature.\n   * @param options - Optional parameters.\n   * @returns An account SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n   */\n  public generateSasStringToSign(\n    expiresOn?: Date,\n    permissions: AccountSASPermissions = AccountSASPermissions.parse(\"r\"),\n    resourceTypes: string = \"sco\",\n    options: ServiceGenerateAccountSasUrlOptions = {},\n  ): string {\n    if (!(this.credential instanceof StorageSharedKeyCredential)) {\n      throw RangeError(\n        \"Can only generate the account SAS when the client is initialized with a shared key credential\",\n      );\n    }\n\n    if (expiresOn === undefined) {\n      const now = new Date();\n      expiresOn = new Date(now.getTime() + 3600 * 1000);\n    }\n\n    return generateAccountSASQueryParametersInternal(\n      {\n        permissions,\n        expiresOn,\n        resourceTypes,\n        services: AccountSASServices.parse(\"f\").toString(),\n        ...options,\n      },\n      this.credential,\n    ).stringToSign;\n  }\n}\n"]}