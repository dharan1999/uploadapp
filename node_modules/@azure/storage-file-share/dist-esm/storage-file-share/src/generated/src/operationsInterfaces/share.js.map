{"version":3,"file":"share.js","sourceRoot":"","sources":["../../../../../../src/generated/src/operationsInterfaces/share.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport {\n  ShareCreateOptionalParams,\n  ShareCreateResponse,\n  ShareGetPropertiesOptionalParams,\n  ShareGetPropertiesResponse,\n  ShareDeleteOptionalParams,\n  ShareDeleteResponse,\n  ShareAcquireLeaseOptionalParams,\n  ShareAcquireLeaseResponse,\n  ShareReleaseLeaseOptionalParams,\n  ShareReleaseLeaseResponse,\n  ShareChangeLeaseOptionalParams,\n  ShareChangeLeaseResponse,\n  ShareRenewLeaseOptionalParams,\n  ShareRenewLeaseResponse,\n  ShareBreakLeaseOptionalParams,\n  ShareBreakLeaseResponse,\n  ShareCreateSnapshotOptionalParams,\n  ShareCreateSnapshotResponse,\n  SharePermission,\n  ShareCreatePermissionOptionalParams,\n  ShareCreatePermissionResponse,\n  ShareGetPermissionOptionalParams,\n  ShareGetPermissionResponse,\n  ShareSetPropertiesOptionalParams,\n  ShareSetPropertiesResponse,\n  ShareSetMetadataOptionalParams,\n  ShareSetMetadataResponse,\n  ShareGetAccessPolicyOptionalParams,\n  ShareGetAccessPolicyResponse,\n  ShareSetAccessPolicyOptionalParams,\n  ShareSetAccessPolicyResponse,\n  ShareGetStatisticsOptionalParams,\n  ShareGetStatisticsResponse,\n  ShareRestoreOptionalParams,\n  ShareRestoreResponse\n} from \"../models\";\n\n/** Interface representing a Share. */\nexport interface Share {\n  /**\n   * Creates a new share under the specified account. If the share with the same name already exists, the\n   * operation fails.\n   * @param options The options parameters.\n   */\n  create(options?: ShareCreateOptionalParams): Promise<ShareCreateResponse>;\n  /**\n   * Returns all user-defined metadata and system properties for the specified share or share snapshot.\n   * The data returned does not include the share's list of files.\n   * @param options The options parameters.\n   */\n  getProperties(\n    options?: ShareGetPropertiesOptionalParams\n  ): Promise<ShareGetPropertiesResponse>;\n  /**\n   * Operation marks the specified share or share snapshot for deletion. The share or share snapshot and\n   * any files contained within it are later deleted during garbage collection.\n   * @param options The options parameters.\n   */\n  delete(options?: ShareDeleteOptionalParams): Promise<ShareDeleteResponse>;\n  /**\n   * The Lease Share operation establishes and manages a lock on a share, or the specified snapshot for\n   * set and delete share operations.\n   * @param options The options parameters.\n   */\n  acquireLease(\n    options?: ShareAcquireLeaseOptionalParams\n  ): Promise<ShareAcquireLeaseResponse>;\n  /**\n   * The Lease Share operation establishes and manages a lock on a share, or the specified snapshot for\n   * set and delete share operations.\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param options The options parameters.\n   */\n  releaseLease(\n    leaseId: string,\n    options?: ShareReleaseLeaseOptionalParams\n  ): Promise<ShareReleaseLeaseResponse>;\n  /**\n   * The Lease Share operation establishes and manages a lock on a share, or the specified snapshot for\n   * set and delete share operations.\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param options The options parameters.\n   */\n  changeLease(\n    leaseId: string,\n    options?: ShareChangeLeaseOptionalParams\n  ): Promise<ShareChangeLeaseResponse>;\n  /**\n   * The Lease Share operation establishes and manages a lock on a share, or the specified snapshot for\n   * set and delete share operations.\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param options The options parameters.\n   */\n  renewLease(\n    leaseId: string,\n    options?: ShareRenewLeaseOptionalParams\n  ): Promise<ShareRenewLeaseResponse>;\n  /**\n   * The Lease Share operation establishes and manages a lock on a share, or the specified snapshot for\n   * set and delete share operations.\n   * @param options The options parameters.\n   */\n  breakLease(\n    options?: ShareBreakLeaseOptionalParams\n  ): Promise<ShareBreakLeaseResponse>;\n  /**\n   * Creates a read-only snapshot of a share.\n   * @param options The options parameters.\n   */\n  createSnapshot(\n    options?: ShareCreateSnapshotOptionalParams\n  ): Promise<ShareCreateSnapshotResponse>;\n  /**\n   * Create a permission (a security descriptor).\n   * @param sharePermission A permission (a security descriptor) at the share level.\n   * @param options The options parameters.\n   */\n  createPermission(\n    sharePermission: SharePermission,\n    options?: ShareCreatePermissionOptionalParams\n  ): Promise<ShareCreatePermissionResponse>;\n  /**\n   * Returns the permission (security descriptor) for a given key\n   * @param filePermissionKey Key of the permission to be set for the directory/file.\n   * @param options The options parameters.\n   */\n  getPermission(\n    filePermissionKey: string,\n    options?: ShareGetPermissionOptionalParams\n  ): Promise<ShareGetPermissionResponse>;\n  /**\n   * Sets properties for the specified share.\n   * @param options The options parameters.\n   */\n  setProperties(\n    options?: ShareSetPropertiesOptionalParams\n  ): Promise<ShareSetPropertiesResponse>;\n  /**\n   * Sets one or more user-defined name-value pairs for the specified share.\n   * @param options The options parameters.\n   */\n  setMetadata(\n    options?: ShareSetMetadataOptionalParams\n  ): Promise<ShareSetMetadataResponse>;\n  /**\n   * Returns information about stored access policies specified on the share.\n   * @param options The options parameters.\n   */\n  getAccessPolicy(\n    options?: ShareGetAccessPolicyOptionalParams\n  ): Promise<ShareGetAccessPolicyResponse>;\n  /**\n   * Sets a stored access policy for use with shared access signatures.\n   * @param options The options parameters.\n   */\n  setAccessPolicy(\n    options?: ShareSetAccessPolicyOptionalParams\n  ): Promise<ShareSetAccessPolicyResponse>;\n  /**\n   * Retrieves statistics related to the share.\n   * @param options The options parameters.\n   */\n  getStatistics(\n    options?: ShareGetStatisticsOptionalParams\n  ): Promise<ShareGetStatisticsResponse>;\n  /**\n   * Restores a previously deleted Share.\n   * @param options The options parameters.\n   */\n  restore(options?: ShareRestoreOptionalParams): Promise<ShareRestoreResponse>;\n}\n"]}