{"version":3,"file":"directory.js","sourceRoot":"","sources":["../../../../../../src/generated/src/operationsInterfaces/directory.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport {\n  DirectoryCreateOptionalParams,\n  DirectoryCreateResponse,\n  DirectoryGetPropertiesOptionalParams,\n  DirectoryGetPropertiesResponse,\n  DirectoryDeleteOptionalParams,\n  DirectoryDeleteResponse,\n  DirectorySetPropertiesOptionalParams,\n  DirectorySetPropertiesResponse,\n  DirectorySetMetadataOptionalParams,\n  DirectorySetMetadataResponse,\n  DirectoryListFilesAndDirectoriesSegmentOptionalParams,\n  DirectoryListFilesAndDirectoriesSegmentResponse,\n  DirectoryListHandlesOptionalParams,\n  DirectoryListHandlesResponse,\n  DirectoryForceCloseHandlesOptionalParams,\n  DirectoryForceCloseHandlesResponse,\n  DirectoryRenameOptionalParams,\n  DirectoryRenameResponse\n} from \"../models\";\n\n/** Interface representing a Directory. */\nexport interface Directory {\n  /**\n   * Creates a new directory under the specified share or parent directory.\n   * @param fileAttributes If specified, the provided file attributes shall be set. Default value:\n   *                       ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.\n   * @param options The options parameters.\n   */\n  create(\n    fileAttributes: string,\n    options?: DirectoryCreateOptionalParams\n  ): Promise<DirectoryCreateResponse>;\n  /**\n   * Returns all system properties for the specified directory, and can also be used to check the\n   * existence of a directory. The data returned does not include the files in the directory or any\n   * subdirectories.\n   * @param options The options parameters.\n   */\n  getProperties(\n    options?: DirectoryGetPropertiesOptionalParams\n  ): Promise<DirectoryGetPropertiesResponse>;\n  /**\n   * Removes the specified empty directory. Note that the directory must be empty before it can be\n   * deleted.\n   * @param options The options parameters.\n   */\n  delete(\n    options?: DirectoryDeleteOptionalParams\n  ): Promise<DirectoryDeleteResponse>;\n  /**\n   * Sets properties on the directory.\n   * @param fileAttributes If specified, the provided file attributes shall be set. Default value:\n   *                       ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.\n   * @param options The options parameters.\n   */\n  setProperties(\n    fileAttributes: string,\n    options?: DirectorySetPropertiesOptionalParams\n  ): Promise<DirectorySetPropertiesResponse>;\n  /**\n   * Updates user defined metadata for the specified directory.\n   * @param options The options parameters.\n   */\n  setMetadata(\n    options?: DirectorySetMetadataOptionalParams\n  ): Promise<DirectorySetMetadataResponse>;\n  /**\n   * Returns a list of files or directories under the specified share or directory. It lists the contents\n   * only for a single level of the directory hierarchy.\n   * @param options The options parameters.\n   */\n  listFilesAndDirectoriesSegment(\n    options?: DirectoryListFilesAndDirectoriesSegmentOptionalParams\n  ): Promise<DirectoryListFilesAndDirectoriesSegmentResponse>;\n  /**\n   * Lists handles for directory.\n   * @param options The options parameters.\n   */\n  listHandles(\n    options?: DirectoryListHandlesOptionalParams\n  ): Promise<DirectoryListHandlesResponse>;\n  /**\n   * Closes all handles open for given directory.\n   * @param handleId Specifies handle ID opened on the file or directory to be closed. Asterisk (‘*’) is\n   *                 a wildcard that specifies all handles.\n   * @param options The options parameters.\n   */\n  forceCloseHandles(\n    handleId: string,\n    options?: DirectoryForceCloseHandlesOptionalParams\n  ): Promise<DirectoryForceCloseHandlesResponse>;\n  /**\n   * Renames a directory\n   * @param renameSource Required. Specifies the URI-style path of the source file, up to 2 KB in length.\n   * @param options The options parameters.\n   */\n  rename(\n    renameSource: string,\n    options?: DirectoryRenameOptionalParams\n  ): Promise<DirectoryRenameResponse>;\n}\n"]}