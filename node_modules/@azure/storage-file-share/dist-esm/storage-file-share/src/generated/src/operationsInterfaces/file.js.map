{"version":3,"file":"file.js","sourceRoot":"","sources":["../../../../../../src/generated/src/operationsInterfaces/file.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport {\n  FileCreateOptionalParams,\n  FileCreateResponse,\n  FileDownloadOptionalParams,\n  FileDownloadResponse,\n  FileGetPropertiesOptionalParams,\n  FileGetPropertiesResponse,\n  FileDeleteOptionalParams,\n  FileDeleteResponse,\n  FileSetHttpHeadersOptionalParams,\n  FileSetHttpHeadersResponse,\n  FileSetMetadataOptionalParams,\n  FileSetMetadataResponse,\n  FileAcquireLeaseOptionalParams,\n  FileAcquireLeaseResponse,\n  FileReleaseLeaseOptionalParams,\n  FileReleaseLeaseResponse,\n  FileChangeLeaseOptionalParams,\n  FileChangeLeaseResponse,\n  FileBreakLeaseOptionalParams,\n  FileBreakLeaseResponse,\n  FileRangeWriteType,\n  FileUploadRangeOptionalParams,\n  FileUploadRangeResponse,\n  FileUploadRangeFromURLOptionalParams,\n  FileUploadRangeFromURLResponse,\n  FileGetRangeListOptionalParams,\n  FileGetRangeListResponse,\n  FileStartCopyOptionalParams,\n  FileStartCopyResponse,\n  FileAbortCopyOptionalParams,\n  FileAbortCopyResponse,\n  FileListHandlesOptionalParams,\n  FileListHandlesResponse,\n  FileForceCloseHandlesOptionalParams,\n  FileForceCloseHandlesResponse,\n  FileRenameOptionalParams,\n  FileRenameResponse\n} from \"../models\";\n\n/** Interface representing a File. */\nexport interface File {\n  /**\n   * Creates a new file or replaces a file. Note it only initializes the file with no content.\n   * @param fileContentLength Specifies the maximum size for the file, up to 4 TB.\n   * @param fileAttributes If specified, the provided file attributes shall be set. Default value:\n   *                       ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.\n   * @param options The options parameters.\n   */\n  create(\n    fileContentLength: number,\n    fileAttributes: string,\n    options?: FileCreateOptionalParams\n  ): Promise<FileCreateResponse>;\n  /**\n   * Reads or downloads a file from the system, including its metadata and properties.\n   * @param options The options parameters.\n   */\n  download(options?: FileDownloadOptionalParams): Promise<FileDownloadResponse>;\n  /**\n   * Returns all user-defined metadata, standard HTTP properties, and system properties for the file. It\n   * does not return the content of the file.\n   * @param options The options parameters.\n   */\n  getProperties(\n    options?: FileGetPropertiesOptionalParams\n  ): Promise<FileGetPropertiesResponse>;\n  /**\n   * removes the file from the storage account.\n   * @param options The options parameters.\n   */\n  delete(options?: FileDeleteOptionalParams): Promise<FileDeleteResponse>;\n  /**\n   * Sets HTTP headers on the file.\n   * @param fileAttributes If specified, the provided file attributes shall be set. Default value:\n   *                       ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.\n   * @param options The options parameters.\n   */\n  setHttpHeaders(\n    fileAttributes: string,\n    options?: FileSetHttpHeadersOptionalParams\n  ): Promise<FileSetHttpHeadersResponse>;\n  /**\n   * Updates user-defined metadata for the specified file.\n   * @param options The options parameters.\n   */\n  setMetadata(\n    options?: FileSetMetadataOptionalParams\n  ): Promise<FileSetMetadataResponse>;\n  /**\n   * [Update] The Lease File operation establishes and manages a lock on a file for write and delete\n   * operations\n   * @param options The options parameters.\n   */\n  acquireLease(\n    options?: FileAcquireLeaseOptionalParams\n  ): Promise<FileAcquireLeaseResponse>;\n  /**\n   * [Update] The Lease File operation establishes and manages a lock on a file for write and delete\n   * operations\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param options The options parameters.\n   */\n  releaseLease(\n    leaseId: string,\n    options?: FileReleaseLeaseOptionalParams\n  ): Promise<FileReleaseLeaseResponse>;\n  /**\n   * [Update] The Lease File operation establishes and manages a lock on a file for write and delete\n   * operations\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param options The options parameters.\n   */\n  changeLease(\n    leaseId: string,\n    options?: FileChangeLeaseOptionalParams\n  ): Promise<FileChangeLeaseResponse>;\n  /**\n   * [Update] The Lease File operation establishes and manages a lock on a file for write and delete\n   * operations\n   * @param options The options parameters.\n   */\n  breakLease(\n    options?: FileBreakLeaseOptionalParams\n  ): Promise<FileBreakLeaseResponse>;\n  /**\n   * Upload a range of bytes to a file.\n   * @param range Specifies the range of bytes to be written. Both the start and end of the range must be\n   *              specified. For an update operation, the range can be up to 4 MB in size. For a clear operation, the\n   *              range can be up to the value of the file's full size. The File service accepts only a single byte\n   *              range for the Range and 'x-ms-range' headers, and the byte range must be specified in the following\n   *              format: bytes=startByte-endByte.\n   * @param fileRangeWrite Specify one of the following options: - Update: Writes the bytes specified by\n   *                       the request body into the specified range. The Range and Content-Length headers must match to\n   *                       perform the update. - Clear: Clears the specified range and releases the space used in storage for\n   *                       that range. To clear a range, set the Content-Length header to zero, and set the Range header to a\n   *                       value that indicates the range to clear, up to maximum file size.\n   * @param contentLength Specifies the number of bytes being transmitted in the request body. When the\n   *                      x-ms-write header is set to clear, the value of this header must be set to zero.\n   * @param options The options parameters.\n   */\n  uploadRange(\n    range: string,\n    fileRangeWrite: FileRangeWriteType,\n    contentLength: number,\n    options?: FileUploadRangeOptionalParams\n  ): Promise<FileUploadRangeResponse>;\n  /**\n   * Upload a range of bytes to a file where the contents are read from a URL.\n   * @param range Writes data to the specified byte range in the file.\n   * @param copySource Specifies the URL of the source file or blob, up to 2 KB in length. To copy a file\n   *                   to another file within the same storage account, you may use Shared Key to authenticate the source\n   *                   file. If you are copying a file from another storage account, or if you are copying a blob from the\n   *                   same storage account or another storage account, then you must authenticate the source file or blob\n   *                   using a shared access signature. If the source is a public blob, no authentication is required to\n   *                   perform the copy operation. A file in a share snapshot can also be specified as a copy source.\n   * @param contentLength Specifies the number of bytes being transmitted in the request body. When the\n   *                      x-ms-write header is set to clear, the value of this header must be set to zero.\n   * @param options The options parameters.\n   */\n  uploadRangeFromURL(\n    range: string,\n    copySource: string,\n    contentLength: number,\n    options?: FileUploadRangeFromURLOptionalParams\n  ): Promise<FileUploadRangeFromURLResponse>;\n  /**\n   * Returns the list of valid ranges for a file.\n   * @param options The options parameters.\n   */\n  getRangeList(\n    options?: FileGetRangeListOptionalParams\n  ): Promise<FileGetRangeListResponse>;\n  /**\n   * Copies a blob or file to a destination file within the storage account.\n   * @param copySource Specifies the URL of the source file or blob, up to 2 KB in length. To copy a file\n   *                   to another file within the same storage account, you may use Shared Key to authenticate the source\n   *                   file. If you are copying a file from another storage account, or if you are copying a blob from the\n   *                   same storage account or another storage account, then you must authenticate the source file or blob\n   *                   using a shared access signature. If the source is a public blob, no authentication is required to\n   *                   perform the copy operation. A file in a share snapshot can also be specified as a copy source.\n   * @param options The options parameters.\n   */\n  startCopy(\n    copySource: string,\n    options?: FileStartCopyOptionalParams\n  ): Promise<FileStartCopyResponse>;\n  /**\n   * Aborts a pending Copy File operation, and leaves a destination file with zero length and full\n   * metadata.\n   * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy File\n   *               operation.\n   * @param options The options parameters.\n   */\n  abortCopy(\n    copyId: string,\n    options?: FileAbortCopyOptionalParams\n  ): Promise<FileAbortCopyResponse>;\n  /**\n   * Lists handles for file\n   * @param options The options parameters.\n   */\n  listHandles(\n    options?: FileListHandlesOptionalParams\n  ): Promise<FileListHandlesResponse>;\n  /**\n   * Closes all handles open for given file\n   * @param handleId Specifies handle ID opened on the file or directory to be closed. Asterisk (‘*’) is\n   *                 a wildcard that specifies all handles.\n   * @param options The options parameters.\n   */\n  forceCloseHandles(\n    handleId: string,\n    options?: FileForceCloseHandlesOptionalParams\n  ): Promise<FileForceCloseHandlesResponse>;\n  /**\n   * Renames a file\n   * @param renameSource Required. Specifies the URI-style path of the source file, up to 2 KB in length.\n   * @param options The options parameters.\n   */\n  rename(\n    renameSource: string,\n    options?: FileRenameOptionalParams\n  ): Promise<FileRenameResponse>;\n}\n"]}